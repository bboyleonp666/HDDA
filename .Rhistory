## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
A = apply(HousePrice[1, ], 2, is.factor)
sum(A)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice$product_type
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
is.factor(HousePrice$product_type)
A = apply(HousePrice, 2, is.factor)
sum(A)
A
A = lapply(HousePrice, is.factor)
A
A = sapply(HousePrice, is.factor)
A
sum(A)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
names(sapply(HousePrice, is.factor))
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice[, sapply(HousePrice, is.factor)]
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
FactorColumns = HousePrice[, sapply(HousePrice, is.factor)]
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
whichsapply(HousePrice, is.factor)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
which(sapply(HousePrice, is.factor))
which(TabLen <= 10)
subset(which(sapply(HousePrice, is.factor)), which(TabLen <= 10))
sets(which(sapply(HousePrice, is.factor)), which(TabLen <= 10))
unique(which(sapply(HousePrice, is.factor)), which(TabLen <= 10))
unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
HousePriceConti = HousePrice[, -idx]
dim(HousePriceConti)
head(HousePriceConti)
complete.case(HousePriceConti)
complete.cases(HousePriceConti)
## check the complete case left
sum(complete.cases(HousePriceConti))
## check the complete case left
sum(!complete.cases(HousePriceConti))
## check the complete case left
sum(!complete.cases(HousePriceConti)) / nrow(HousePriceConti)
### packages
library(magrittr)
library(dplyr)
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
## remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10 while it's not a factor
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
ncol(HousePrice) - sum(TabLen <= 10) # Number of the columns left without freqence length not greater than 10
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
HousePriceConti = HousePrice[, -idx]
dim(HousePriceConti)
head(HousePriceConti)
## check the complete case left
sum(!complete.cases(HousePriceConti)) / nrow(HousePriceConti)
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv")
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv")
### write the adjust data as csv
?write.csv(HousePriceConti, "HousePriceContinueVar.csv")
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv", row.names = FALSE)
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv", row.names = FALSE)
<<<<<<< HEAD
library(mice)
?mice
### packages
library(magrittr)
library(dplyr)
library(mice)
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
## remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10 while it's not a factor
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
ncol(HousePrice) - sum(TabLen <= 10) # Number of the columns left without freqence length not greater than 10
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
HousePriceConti = HousePrice[, -idx]
dim(HousePriceConti)
head(HousePriceConti)
## check the complete case left
sum(!complete.cases(HousePriceConti)) / nrow(HousePriceConti)
## try n error: imputation
HousePriceConti[, complete.cases(HousePriceConti)]
## try n error: imputation
HousePriceConti[complete.cases(HousePriceConti), ]
## try n error: imputation
CompletetHousePrice = HousePriceConti[complete.cases(HousePriceConti), ]
install.packages("missForest")
# install.packages("missForest")
library(missForest)
mean(is.na(HousePriceConti))
?prodNA(CompletetHousePrice, p = .05)
prodNA(CompletetHousePrice, noNA = .05)
TestImputeHousePrice = prodNA(CompletetHousePrice, noNA = .05)
?mice(TestImputeHousePrice, )
RFimputeHousePrice = mice(TestImputeHousePrice, method = "rf", maxit = 2, m = 20)
RFimputeHousePrice = mice(TestImputeHousePrice, method = "rf", maxit = 1, m = 5)
sample(1:nrow(CompletetHousePrice), 1000)
idx = sample(1:nrow(CompletetHousePrice), 1000)
mean(is.na(HousePriceConti)) # missing rate
# use some sample to find the best method to imputate
idx = sample(1:nrow(CompletetHousePrice), 5000)
CompletetHousePrice_sample = CompletetHousePrice[idx, ]
TestImputeHousePrice = prodNA(CompletetHousePrice_sample, noNA = .05)
RFimputeHousePrice = mice(TestImputeHousePrice, method = "rf", maxit = 1, m = 5)
complete(RFimputeHousePrice)
sum(is.na(complete(CARTimputeHousePrice)))
complete(CARTimputeHousePrice)
CARTimputeHousePrice
complete(RFimputeHousePrice)
RFimputed = complete(RFimputeHousePrice)
mean(is.na(RFimputed))
RFimputed = complete(RFimputeHousePrice)
mean(is.na(RFimputed))
=======
### ------------ Imputation Start From Here ------------ ###
## try n error: imputation
# get complete case of house price which are continuous
HousePriceConti = read.csv("HousePrice_ContiVar.csv")
CompletetHousePrice = HousePriceConti[complete.cases(HousePriceConti), ]
mean(is.na(HousePriceConti)) # missing rate
### ------------ Imputation Start From Here ------------ ###
## try n error: imputation
# get complete case of house price which are continuous
HousePriceConti = read.csv("HousePrice_ContiVar.csv")
CompleteHousePrice = HousePriceConti[complete.cases(HousePriceConti), ]
mean(is.na(HousePriceConti)) # missing rate
## use CompletetHousePrice as input for analysis for saving time
write.csv(CompletetHousePrice, "CompleteHousePrice.csv")
>>>>>>> 62285c0380271181132bc3d31f4a278be1b482aa
list.files(pattern = "Complete")
### Use methods like PCA, isomap to analyze the imputated data
HousePrice = read.csv(list.files(pattern = "Complete"))
dim(HousePrice)
head(HousePrice)
"count" in colnames(HousePrice)
colnames(HousePrice)
grel("count", colnames(HousePrice))
grepl("count", colnames(HousePrice))
sum(grepl("count", colnames(HousePrice)))
head(HousePrice)
dim(HousePrice)
list.files(pattern = "Imputed")
list.files
### Use methods like PCA, isomap to analyze the imputed data
list.files()
list.files(pattern = "cart")
### Use methods like PCA, isomap to analyze the imputed data
HousePriceRDS = readRDS(list.files(pattern = "cart"))
HousePriceRDS$data
HousePrice_withNA = HousePriceRDS$data
HousePrice = HousePrice_withNA[complete.cases(HousePrice_withNA), ]
HousePrice
colnames(HousePrice)
## remove variables by hand
cnames = colnames(HousePrice)
which(grepl("bus_terminal_avto_km", cnames))
grep("_min", cnames)
specific_var_idx = grepl("bus_terminal_avto_km", cnames)
cnames{grep("_min", cnames)}
cnames[grep("_min", cnames)]
cnames[grep("min", cnames)]
specific_var_idx
specific_var_idx = grep("bus_terminal_avto_km", cnames)
specific_var_idx
specific_var_idx
cnames[grep("min", cnames)]
cnames[grep("_min", cnames)]
cnames[grep("_min_price", cnames)]
grep("_min", cnames)
grep("_min_price", cnames)
setdiff(grep("_min", cnames), grep("_min_price", cnames))
rm(list = ls())
### Use methods like PCA, isomap to analyze the imputed data
## read data from .rds file
HousePriceRDS = readRDS(list.files(pattern = "cart"))
HousePrice_withNA = HousePriceRDS$data
## remove variables by hand
cnames = colnames(HousePrice_withNA)
# pick the index of variable with "_min" in their names but not including "_min_price"
columnRM_idx = setdiff(grep("_min", cnames), grep("_min_price", cnames))
HousePrice = HousePrice_withNA[complete.cases(HousePrice_withNA), ]
columnRM_idx
cnames
# pick the index of variable with "_min" in their names but not including "_min_price"
column_min_idx = setdiff(grep("_min", cnames), grep("_min_price", cnames))
grep("avg", cnames)
cnames[grep("avg", cnames)]
column_cafavg_idx = grep("cafe_avg", cnames)
column_cafavg_idx
union(column_min_idx, column_cafavg_idx)
column_to_remove = union(column_min_idx, column_cafavg_idx)
column_to_remove
# remove rows and columns that we decided to remove
HousePrice = HousePrice_withNA[complete.cases(HousePrice_withNA), -column_to_remove]
# remove rows and columns that we decided to remove
row_idx_to_remove = complete.cases(HousePrice_withNA)
HousePrice = HousePrice_withNA[-row_idx_to_remove, -column_to_remove]
HousePrice
cnames
### Use methods like PCA, isomap to analyze the imputed data
## read data from .rds file
HousePriceRDS = readRDS(list.files(pattern = "cart"))
HousePrice_withNA = HousePriceRDS$data[, -1]
id = HousePriceRDS$data[, 1]
## remove variables by hand
cnames = colnames(HousePrice_withNA)
# pick the index of variable with "_min" in their names but not including "_min_price"
column_min_idx = setdiff(grep("_min", cnames), grep("_min_price", cnames))
column_cafavg_idx = grep("cafe_avg", cnames)
column_to_remove = union(column_min_idx, column_cafavg_idx)
# remove rows and columns that we decided to remove
row_idx_to_remove = complete.cases(HousePrice_withNA)
HousePrice = HousePrice_withNA[-row_idx_to_remove, -column_to_remove]
cnames
### Use methods like PCA, isomap to analyze the imputed data
## read data from .rds file
HousePriceRDS = readRDS(list.files(pattern = "cart"))
HousePrice_withNA = HousePriceRDS$data
## remove variables by hand
cnames = colnames(HousePrice_withNA)
# pick the index of variable with "_min" in their names but not including "_min_price"
column_min_idx = setdiff(grep("_min", cnames), grep("_min_price", cnames))
column_cafavg_idx = grep("cafe_avg", cnames)
column_to_remove = union(column_min_idx, column_cafavg_idx)
# pick columns of only complete ones
row_idx_to_remove = complete.cases(HousePrice_withNA)
# remove rows and columns that we decided to remove
HousePrice = HousePrice_withNA[-row_idx_to_remove, -column_to_remove]
# split data into id, data, price
id = HousePrice[, "id"]
id
price = HousePrice[, "price_doc"]
# split data into id, data, price
id = HousePrice[, "id"]
data = HousePrice[, !c("id", "price_doc")]
data = HousePrice[, -c("id", "price_doc")]
c("id", "price_doc")
match(c("id", "price_doc"), colnames(HousePrice))
price = HousePrice[, "price_doc"]
# scale the data
scale(data)
data
# find index of vector in another vector using "match"
data = HousePrice[, -match(c("id", "price_doc"), colnames(HousePrice))]
data
# scale the data
scale(data)
sum(is.na(data))
colSums(is.na(data))
# pick columns of only complete ones
row_idx_to_keep = complete.cases(HousePrice_withNA)
# remove rows and columns that we decided to remove
HousePrice = HousePrice_withNA[row_idx_to_remove, -column_to_remove]
# split data into id, data, price
id = HousePrice[, "id"]
# find index of vector in another vector using "match"
data = HousePrice[, -match(c("id", "price_doc"), colnames(HousePrice))]
price = HousePrice[, "price_doc"]
# scale the data
scale(data)
colSums(is.na(data))
sum(is.na(data))
## package
library(magrittr)
library(ggplot2)
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
NA_volumn = colSums(is.na(HousePriceTrain))
NAdata = data.frame(variable = row.names(NAdata),
notNA_volumn = nrow(HousePriceTrain) - NA_volumn,
NA_volumn,
row.names = NULL)
NAdata %>%
subset(NA_volumn > 0) %>%
ggplot(aes(reorder(variable, NA_volumn), y = NA_volumn)) +
coord_flip() + xlab("Variables") + ylab("NA Volumn") +
geom_bar(position = "stack", stat = "identity") +
theme_bw()
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
NA_volumn = colSums(is.na(HousePriceTrain))
NAdata = data.frame(variable = row.names(NAdata),
notNA_volumn = nrow(HousePriceTrain) - NA_volumn,
NA_volumn,
row.names = NULL)
NAdata = data.frame(variable = row.names(NA_volumn),
notNA_volumn = nrow(HousePriceTrain) - NA_volumn,
NA_volumn,
row.names = NULL)
NA_volumn = colSums(is.na(HousePriceTrain))
NAdata = data.frame(variable = row.names(HousePriceTrain),
notNA_volumn = nrow(HousePriceTrain) - NA_volumn,
NA_volumn,
row.names = NULL)
NAdata %>%
subset(NA_volumn > 0) %>%
ggplot(aes(reorder(variable, NA_volumn), y = NA_volumn)) +
coord_flip() + xlab("Variables") + ylab("NA Volumn") +
geom_bar(position = "stack", stat = "identity") +
theme_bw()
install.packages("outliers")
library(outliers) # for testing outliers
## check if there is any outliers
chisq.out.test(price)
# chi-squared test for outlier
#
# data:  price
# X-squared = 425.85, p-value < 2.2e-16
# alternative hypothesis: highest value 111111112 is an outlier
which(price == 111111112)
outlier = chisq.out.test(price)
outlier
# chi-squared test for outlier
#
# data:  price
# X-squared = 425.85, p-value < 2.2e-16
# alternative hypothesis: highest value 111111112 is an outlier
str(outlier)
outlier$alternative
rm(list = ls9)
rm(list = ls())
### ------------ Delete columns of categorical ------------ ###
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
## pick some special variable which we want to keep
id = HousePriceTrain$id
time_trade = as.Date(HousePriceTrain$timestamp)
sub_area = HousePriceTrain$sub_area
## load raw data and pick the categorical data we want
DataDir = list.files()[file.info(list.files())$isdir]
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
cnames_train = colnames(HousePriceTrain)
cnames_train
grep("thermal_power_plant_raion", cnames_train)
grep("detention_facility_raion", cnames_train)
idx1 = grep("thermal_power_plant_raion", cnames_train)
idx2 = grep("detention_facility_raion", cnames_train)
idx1:idx2
head(HousePriceTrain[, idx1:idx2])
cnames_train[idx1:idx2]
cnames_train = grep("raion", cnames_train)
cnames_train
cnames_train = grep("raion", cnames_train)
cnames_train[idx1:idx2]
cnames_train[grep("raion", cnames_train)]
cnames_train = colnames(HousePriceTrain)
cnames_train[grep("raion", cnames_train)]
cnames_train[idx1:idx2]
sapply(HousePriceTrain, class)
sapply(HousePriceTrain, class) == "factor"
which(sapply(HousePriceTrain, class) == "factor")
idx_1 = which(sapply(HousePriceTrain, class) == "factor")
idx_2 = grep("raion", cnames_train)
idx1:idx2
idx_1 = which(sapply(HousePriceTrain, class) == "factor")
idx_2 = grep("raion", cnames_train)
idx_1
idx_2
union(idx_1, idx_2)
interaction(idx_1, idx_2)
intersect(idx_1, idx_2)
idx1:idx2
## find the categorical variables
# find the index for the specific variables
factor_idx = which(sapply(HousePriceTrain, class) == "factor")
raion_idx = grep("raion", cnames_train)
raion = HousePriceTrain[, intersect(factor_idx, raion_idx)]
type = HousePriceTrain$product_type
sub_area = HousePriceTrain$sub_area
raion
head(raion)
type
categorical = cbind(raion, type, sub_area)
categorical
categorical = cbind(raion, type, sub_area)[-column_to_remove]
categorical = cbind(raion, type, sub_area)[-row_idx_to_keep, ]
rm(list = ls())
### packages
library(vegan) # for isomap
### ---- read data and remove NA rows and columns that could cause multi-collinearity ---- ###
### read data from .rds file
HousePriceRDS = readRDS(list.files(pattern = "cart"))
HousePrice_withNA = HousePriceRDS$data
## remove variables by hand
cnames = colnames(HousePrice_withNA)
# pick the index of variable with "_min" in their names but not including "_min_price"
column_min_idx = setdiff(grep("_min", cnames), grep("_min_price", cnames))
column_cafavg_idx = grep("cafe_avg", cnames)
column_to_remove = union(column_min_idx, column_cafavg_idx)
# pick columns of only complete ones
row_idx_to_keep = complete.cases(HousePrice_withNA)
# remove rows and columns that we decided to remove
HousePrice = HousePrice_withNA[row_idx_to_remove, -column_to_remove]
# split data into id, data, price
id = HousePrice[, "id"]
data = HousePrice[, -match(c("id", "price_doc"), colnames(HousePrice))]
# find index of vector in another vector using "match"
price = HousePrice[, "price_doc"]
HousePrice_withNA = HousePriceRDS$data
## remove variables by hand
cnames = colnames(HousePrice_withNA)
# pick the index of variable with "_min" in their names but not including "_min_price"
column_min_idx = setdiff(grep("_min", cnames), grep("_min_price", cnames))
column_cafavg_idx = grep("cafe_avg", cnames)
column_to_remove = union(column_min_idx, column_cafavg_idx)
# pick columns of only complete ones
row_idx_to_keep = complete.cases(HousePrice_withNA)
# remove rows and columns that we decided to remove
HousePrice = HousePrice_withNA[row_idx_to_remove, -column_to_remove]
# pick columns of only complete ones
row_idx_to_keep = complete.cases(HousePrice_withNA)
# remove rows and columns that we decided to remove
HousePrice = HousePrice_withNA[row_idx_to_remove, -column_to_remove]
# remove rows and columns that we decided to remove
HousePrice = HousePrice_withNA[row_idx_to_keep, -column_to_remove]
# split data into id, data, price
id = HousePrice[, "id"]
data = HousePrice[, -match(c("id", "price_doc"), colnames(HousePrice))]
# find index of vector in another vector using "match"
price = HousePrice[, "price_doc"]
# scale the data
data_scaled = scale(data)
### load raw data and pick the categorical data we want
## read origin data
DataDir = list.files()[file.info(list.files())$isdir]
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
cnames_train = colnames(HousePriceTrain)
## find the categorical variables
# find the index for the specific variables
factor_idx = which(sapply(HousePriceTrain, class) == "factor")
raion_idx = grep("raion", cnames_train)
raion = HousePriceTrain[, intersect(factor_idx, raion_idx)]
type = HousePriceTrain$product_type
sub_area = HousePriceTrain$sub_area
categorical = cbind(raion, type, sub_area)[-row_idx_to_keep, ]
categorical
categorical = cbind(raion, type, sub_area)[row_idx_to_keep, ]
## save data in "HousePriceList.rds"
saveRDS(HousePriceList, "HousePriceList.rds")
### Combine data into a list
HousePriceList = list(id = id,
price = price,
continuous = data,
categorical = categorical)
## save data in "HousePriceList.rds"
saveRDS(HousePriceList, "HousePriceList.rds")
