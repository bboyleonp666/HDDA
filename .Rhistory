HousePrice
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
# remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
# transfer dummy variables into dummy
HousePrice
# transfer dummy variables into dummy
HousePrice$school_education_centers_top_20_raion
# transfer dummy variables into dummy
table(HousePrice$school_education_centers_top_20_raion)
# transfer dummy variables into dummy
table(HousePrice$school_education_centers_top_20_raion)
# transfer dummy variables into dummy
table(HousePrice$school_education_centers_top_20_raion)
ifelse(HousePrice$school_education_centers_top_20_raion >= 1, 1, 0)
HousePrice$school_education_centers_top_20_raion =
ifelse(HousePrice$school_education_centers_top_20_raion >= 1, 1, 0)
# transfer dummy variables into dummy
table(HousePrice$school_education_centers_top_20_raion)
# transfer dummy variables into dummy
table(HousePrice$school_education_centers_top_20_raion)
HousePrice$school_education_centers_top_20_raion =
factor(ifelse(HousePrice$school_education_centers_top_20_raion >= 1, 1, 0))
HousePrice$school_education_centers_top_20_raion
HousePrice$healthcare_centers_raion
table(HousePrice$healthcare_centers_raion)
table(HousePrice$university_top_20_raion)
HousePrice$university_top_20_raion =
factor(ifelse(HousePrice$university_top_20_raion >= 1, 1, 0))
### packages
library(magrittr)
library(dplyr)
table(HousePrice$culture_objects_top_25_raion)
# transfer dummy variables into dummy
table(HousePrice$school_education_centers_top_20_raion) # only few 1 and 2s
HousePrice = HousePriceTrain[, -ColumnRM]
# transfer dummy variables into dummy
table(HousePrice$school_education_centers_top_20_raion) # only few 1 and 2s
table(HousePrice$healthcare_centers_raion)
table(HousePrice$university_top_20_raion) # only few 1, 2 and 3s
## transfer dummy variables into dummy
# find the freqence of each column less then 10
FreqTabs = apply(HousePrice, 2, function(x) length(table))
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10
FreqTabs = apply(HousePrice, 2, function(x) length(table))
FreqTabs[FreqTabs <= 10]
table(HousePrice$healthcare_centers_raion)
length(table(HousePrice$healthcare_centers_raion))
FreqTabs
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10
FreqTabs = apply(HousePrice, 2, function(x) length(table(x)))
FreqTabs[FreqTabs <= 10]
is.factor(HousePrice$oil_chemistry_raion)
ProtenFac = apply(HousePrice, 2, FindProtentialFactor)
FindProtentialFactor = function(x){
if(!is.factor(x)){
FreqTab = length(table(x))
out = (FreqTab <= 10)
return(out)
}
}
ProtenFac = apply(HousePrice, 2, FindProtentialFactor)
ProtenFac
FindProtentialFactor = function(x){
if(!is.factor(x)){
FreqTab = length(table(x))
return(FreqTab)
}
}
ProtenFac = apply(HousePrice, 2, FindProtentialFactor)
ProtenFac
TabLen = apply(HousePrice, 2, FindProtentialFactor)
TabLen[TabLen <= 10]
HousePrice$product_type
FindProtentialFactor = function(x){
if(!is.factor(x)){
FreqTab = length(table(x))
return(FreqTab)
}
}
FALSE <= 10
TRUE < 10
FindProtentialFactor = function(x){
if(!is.factor(x)){
FreqTab = length(table(x))
return(FreqTab)
}else{
return(100)
}
}
TabLen = apply(HousePrice, 2, FindProtentialFactor)
TabLen[TabLen <= 10]
is.factor(HousePrice$product_type)
TabLen
TabLen
FindProtentialFactor = function(x){
if(is.factor(x)){
FreqTab = 100
}else{
FreqTab = length(table(x))
}
return(FreqTabs)
}
TabLen = apply(HousePrice, 2, FindProtentialFactor)
TabLen[TabLen <= 10]
is.factor(HousePrice$product_type[1])
HousePrice$product_type
is.factor(HousePrice$product_type)
FindProtentialFactor = function(x){
if(is.factor(x[1])){
FreqTab = 100
}else{
FreqTab = length(table(x))
}
return(FreqTabs)
}
TabLen = apply(HousePrice, 2, FindProtentialFactor)
TabLen[TabLen <= 10]
table(HousePrice$school_education_centers_top_20_raion)
is.factor(HousePrice$product_type)
table(HousePrice$product_type)
length(table(HousePrice$product_type))
FindProtentialFactor = function(x){
if(is.factor(x)){
FreqTab = 100
}else{
FreqTab = length(table(x))
}
return(FreqTab)
}
TabLen = apply(HousePrice, 2, FindProtentialFactor)
TabLen[TabLen <= 10]
names(TabLen[TabLen <= 10])
which(TabLen <= 10)
?lapply()
HousePrice[, which(TabLen <= 10)] %>%
apply(FUN = table)
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table)
HousePrice$culture_objects_top_25_raion
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table)
HousePrice$ecology
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table)
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
### packages
library(magrittr)
library(dplyr)
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
## remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10 while it's not a factor
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
## remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10 while it's not a factor
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
### packages
library(magrittr)
library(dplyr)
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
HousePrice[, which(TabLen >= 10)]
### packages
library(magrittr)
library(dplyr)
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
## remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10 while it's not a factor
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
dim(HousePrice[, which(TabLen >= 10)])
is.factor(HousePrice[1, ])
for(k in(HousePrice[1, ])){
print(is.factor(k))
}
sum(TabLen <= 10)
ncol(HousePrice) - sum(TabLen <= 10)
## Decision: remove all the dummy variable
# find the
summary(HousePrice)
## Decision: remove all the dummy variable
# find the
atr(HousePrice)
## Decision: remove all the dummy variable
# find the
str(HousePrice)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice %>% sapply(class)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice %>% sapply(class) == "factor"
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
names(HousePrice %>% sapply(class) == "factor")
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice %>% sapply(class) == "factor"
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
FactorCol = HousePrice %>% sapply(class) == "factor"
names(FactorCol)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice %>% sapply(class)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice %>% sapply(class) == "factor" %>%
names()
HousePrice %>% sapply(class) == "factor"
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
sapply(HousePrice, is.factor)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
names(sapply(HousePrice, is.factor))
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
apply(HousePrice, 2, is.factor)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
A = apply(HousePrice, 2, is.factor)
sum(A)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
A = apply(HousePrice[1, ], 2, is.factor)
sum(A)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice$product_type
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
is.factor(HousePrice$product_type)
A = apply(HousePrice, 2, is.factor)
sum(A)
A
A = lapply(HousePrice, is.factor)
A
A = sapply(HousePrice, is.factor)
A
sum(A)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
names(sapply(HousePrice, is.factor))
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
HousePrice[, sapply(HousePrice, is.factor)]
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
FactorColumns = HousePrice[, sapply(HousePrice, is.factor)]
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
whichsapply(HousePrice, is.factor)
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the factor
which(sapply(HousePrice, is.factor))
which(TabLen <= 10)
subset(which(sapply(HousePrice, is.factor)), which(TabLen <= 10))
sets(which(sapply(HousePrice, is.factor)), which(TabLen <= 10))
unique(which(sapply(HousePrice, is.factor)), which(TabLen <= 10))
unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
HousePriceConti = HousePrice[, -idx]
dim(HousePriceConti)
head(HousePriceConti)
complete.case(HousePriceConti)
complete.cases(HousePriceConti)
## check the complete case left
sum(complete.cases(HousePriceConti))
## check the complete case left
sum(!complete.cases(HousePriceConti))
## check the complete case left
sum(!complete.cases(HousePriceConti)) / nrow(HousePriceConti)
### packages
library(magrittr)
library(dplyr)
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
## remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10 while it's not a factor
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
ncol(HousePrice) - sum(TabLen <= 10) # Number of the columns left without freqence length not greater than 10
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
HousePriceConti = HousePrice[, -idx]
dim(HousePriceConti)
head(HousePriceConti)
## check the complete case left
sum(!complete.cases(HousePriceConti)) / nrow(HousePriceConti)
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv")
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv")
### write the adjust data as csv
?write.csv(HousePriceConti, "HousePriceContinueVar.csv")
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv", row.names = FALSE)
### write the adjust data as csv
write.csv(HousePriceConti, "HousePriceContinueVar.csv", row.names = FALSE)
<<<<<<< HEAD
library(mice)
?mice
### packages
library(magrittr)
library(dplyr)
library(mice)
### data pre-processing
DataDir = list.files()[file.info(list.files())$isdir]
# HousePriceTest = read.csv(list.files(DataDir, pattern = "test", full.names = TRUE))
HousePriceTrain = read.csv(list.files(DataDir, pattern = "train", full.names = TRUE))
head(HousePriceTrain)
dim(HousePriceTrain)
colnames(HousePriceTrain)
## check NA proportion in variables
# default setting
AbandonRatio = .25
# get columns with NAs
NAinVar = apply(HousePriceTrain, 2, function(x) sum(is.na(x)))
NAinVar[NAinVar > 0]
## remove columns with too many NAs
ColumnRM = which(NAinVar >= nrow(HousePriceTrain)*AbandonRatio)
HousePrice = HousePriceTrain[, -ColumnRM]
head(HousePrice)
dim(HousePrice)
## transfer dummy variables into dummy
# find the freqence of each column not greater then 10 while it's not a factor
TabLen = apply(HousePrice, 2, function(x) length(table(x)))
names(TabLen[TabLen <= 10])
HousePrice[, which(TabLen <= 10)] %>%
apply(2, FUN = table, useNA = "ifany")
ncol(HousePrice) - sum(TabLen <= 10) # Number of the columns left without freqence length not greater than 10
## Decision: remove all the columns which are factor(dummy) or freqence length not greater than 10
# find the index of factor and TabLen <= 10
idx = unique(c(which(sapply(HousePrice, is.factor)), which(TabLen <= 10)))
HousePriceConti = HousePrice[, -idx]
dim(HousePriceConti)
head(HousePriceConti)
## check the complete case left
sum(!complete.cases(HousePriceConti)) / nrow(HousePriceConti)
## try n error: imputation
HousePriceConti[, complete.cases(HousePriceConti)]
## try n error: imputation
HousePriceConti[complete.cases(HousePriceConti), ]
## try n error: imputation
CompletetHousePrice = HousePriceConti[complete.cases(HousePriceConti), ]
install.packages("missForest")
# install.packages("missForest")
library(missForest)
mean(is.na(HousePriceConti))
?prodNA(CompletetHousePrice, p = .05)
prodNA(CompletetHousePrice, noNA = .05)
TestImputeHousePrice = prodNA(CompletetHousePrice, noNA = .05)
?mice(TestImputeHousePrice, )
RFimputeHousePrice = mice(TestImputeHousePrice, method = "rf", maxit = 2, m = 20)
RFimputeHousePrice = mice(TestImputeHousePrice, method = "rf", maxit = 1, m = 5)
sample(1:nrow(CompletetHousePrice), 1000)
idx = sample(1:nrow(CompletetHousePrice), 1000)
mean(is.na(HousePriceConti)) # missing rate
# use some sample to find the best method to imputate
idx = sample(1:nrow(CompletetHousePrice), 5000)
CompletetHousePrice_sample = CompletetHousePrice[idx, ]
TestImputeHousePrice = prodNA(CompletetHousePrice_sample, noNA = .05)
RFimputeHousePrice = mice(TestImputeHousePrice, method = "rf", maxit = 1, m = 5)
complete(RFimputeHousePrice)
sum(is.na(complete(CARTimputeHousePrice)))
complete(CARTimputeHousePrice)
CARTimputeHousePrice
complete(RFimputeHousePrice)
RFimputed = complete(RFimputeHousePrice)
mean(is.na(RFimputed))
RFimputed = complete(RFimputeHousePrice)
mean(is.na(RFimputed))
=======
### ------------ Imputation Start From Here ------------ ###
## try n error: imputation
# get complete case of house price which are continuous
HousePriceConti = read.csv("HousePrice_ContiVar.csv")
CompletetHousePrice = HousePriceConti[complete.cases(HousePriceConti), ]
mean(is.na(HousePriceConti)) # missing rate
### ------------ Imputation Start From Here ------------ ###
## try n error: imputation
# get complete case of house price which are continuous
HousePriceConti = read.csv("HousePrice_ContiVar.csv")
CompleteHousePrice = HousePriceConti[complete.cases(HousePriceConti), ]
mean(is.na(HousePriceConti)) # missing rate
## use CompletetHousePrice as input for analysis for saving time
write.csv(CompletetHousePrice, "CompleteHousePrice.csv")
>>>>>>> 62285c0380271181132bc3d31f4a278be1b482aa
list.files(pattern = "Complete")
### Use methods like PCA, isomap to analyze the imputated data
HousePrice = read.csv(list.files(pattern = "Complete"))
dim(HousePrice)
head(HousePrice)
"count" in colnames(HousePrice)
colnames(HousePrice)
grel("count", colnames(HousePrice))
grepl("count", colnames(HousePrice))
sum(grepl("count", colnames(HousePrice)))
head(HousePrice)
dim(HousePrice)
